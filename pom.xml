<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>net.mdatools</groupId>
  <artifactId>modelant</artifactId>
  <version>${revision}</version>

  <packaging>pom</packaging>

  <name>modelant</name>

  <!-- The formatting of the description will be lost when generating the site, so here it is just a text. No way to put HTML here AND export it site:site as interpreted HTML -->
  <description>
Modelant provides JMI-compliant mechanism to read, process, export models in MOF 1.4, UML 1.3 and UML 1.4, including also an engine for generation of code (any texts) using Object-Oriented Programming
and templates. It is an extensible framework allowing adding support of other languages, described using MOF 1.4 metamodels.

Modelant provides Maven plugins to automate
  the creation and comparison of UML 1.3, UML 1.4, MOF 1.4 models;
  the generation of code from models;
  the reverse engineering of java code, relational databases and XML DTD/XSD;
  the transformatoion of models, e.g. tranformation of of UMl 1.3 models to UML 1.4;
  the comparison and change identification in UML 1.3/UML 1.4 models and MOF 1.4 metamodels.

The produced UML 1.3 models are suitable to be imported in
  Rational Rose 2003 + XMI Plugin,
  WhiteStar UML / Star UML,
  Enterprise Architect,
  other,
as they employ MOF 1.3/MOF 1.4 as reading MOF 1.3 is internally converted to MOF1.4 and XMI 1.1 and XMI 1.2.

whereas the converted to UML 1.4 models can be imported in
  Argo UML,
  Enterprise Architect,
  other
as they employ MOF 1.4 and XMI 1.1 and XMI 1.2.

Modelant wraps the NetBeans Meta-Data Repository (MDR).
  </description>
  <url>https://mdatools.net/</url>
  <inceptionYear>2001</inceptionYear>

  <organization>
    <name>MDA Tools</name>
    <url>https://mdatools.net/</url>
  </organization>

  <licenses>
    <license>
      <name>Eclipse Public License v 2.0</name>
      <url>https://www.eclipse.org/legal/epl-v20.html</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <developers>
    <developer>
      <name>Rusi Popov</name>
      <email>popovr@mdatools.net</email>
      <organization>MDA Tools</organization>
    </developer>
  </developers>

  <mailingLists>
    <mailingList>
      <subscribe>https://mdatools.net/blog/</subscribe>
      <unsubscribe>https://mdatools.net/blog/</unsubscribe>
      <archive>https://mdatools.net/blog/</archive>
    </mailingList>
  </mailingLists>

  <modules>
    <module>repository</module>
    <module>core</module>
    <module>template</module>
    <module>mof14</module>
    <module>uml13</module>
    <module>uml14</module>
    <module>conversion</module>
  </modules>

  <scm>
    <url>https://github.com/rpopov/modelant</url>
    <connection>scm:git:https://github.com/rpopov/modelant.git</connection>
    <developerConnection>scm:git:https://github.com/rpopov/modelant.git</developerConnection>
  </scm>

  <issueManagement>
    <system>Github</system>
    <url>https://github.com/rpopov/modelant/issues</url>
  </issueManagement>

  <distributionManagement>
    <!-- see https://maven.apache.org/plugins/maven-site-plugin/examples/creating-content.html -->
    <site>
      <id>mdatools.net</id>
      <url>scp://mdatools.net:${site-port}/home/mdatools/public_html/product/${project.version}/</url>
    </site>
    <repository>
      <id>development</id>
      <url>http://localhost:8081/repository/modelant-maven-release/</url>
    </repository>
    <snapshotRepository>
      <id>development</id>
      <url>http://localhost:8081/repository/modelant-maven-snapshot/</url>
    </snapshotRepository>
  </distributionManagement>

  <properties>
    <revision>3.3.0-SNAPSHOT</revision>

    <!--
      Test debug options
      -->
    <DEBUG_PORT>7000</DEBUG_PORT>
    <DEBUG_SUSPEND>n</DEBUG_SUSPEND>

    <build.compiler.debug>true</build.compiler.debug>
    <build.compiler.debug.level>lines,vars,source</build.compiler.debug.level>

    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <javadocDirectory>${basedir}/src/javadoc</javadocDirectory>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.apache.maven</groupId>
        <artifactId>maven-plugin-api</artifactId>
        <version>3.0</version>
        <!--scope>provided</scope-->
      </dependency>
      <dependency>
        <groupId>org.apache.maven</groupId>
        <artifactId>maven-plugin-descriptor</artifactId>
        <version>2.2.1</version>
        <!--scope>provided</scope-->
      </dependency>
      <dependency>
        <groupId>org.apache.maven.plugin-tools</groupId>
        <artifactId>maven-plugin-annotations</artifactId>
        <version>3.5.1</version>
        <!--scope>provided</scope-->
      </dependency>
      <dependency>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.0.0</version>
      </dependency>
      <dependency>
        <!-- javax.jmi.repository -->
        <groupId>org.andromda.thirdparty.jmi</groupId>
        <artifactId>jmi</artifactId>
        <version>20030918</version>
      </dependency>
      <dependency>
        <!-- javax.jmi.model -->
        <groupId>org.andromda.thirdparty.jmi</groupId>
        <artifactId>mof</artifactId>
        <version>20030918</version>
      </dependency>
      <dependency>
        <groupId>org.andromda.thirdparty.netbeans.mdr</groupId>
        <artifactId>jmiutils</artifactId>
        <version>20050711</version>
      </dependency>
      <dependency>
        <groupId>org.andromda.thirdparty.netbeans.mdr</groupId>
        <artifactId>mdrapi</artifactId>
        <version>20050711</version>
      </dependency>
      <dependency>
        <groupId>org.andromda.thirdparty.netbeans.mdr</groupId>
        <artifactId>nbmdr</artifactId>
        <version>20050711</version>
      </dependency>
      <dependency>
        <groupId>org.andromda.thirdparty.netbeans.mdr</groupId>
        <artifactId>openide-util</artifactId>
        <version>20050711</version>
      </dependency>
      <dependency>
        <groupId>org.apache.maven.shared</groupId>
        <artifactId>file-management</artifactId>
        <version>3.0.0</version>
      </dependency>
      <dependency>
        <groupId>com.sun.xsom</groupId>
        <artifactId>xsom</artifactId>
        <version>20110809</version>
      </dependency>
      <dependency>
        <groupId>com.thaiopensource</groupId>
        <artifactId>trang</artifactId>
        <version>20091111</version>
      </dependency>
      <dependency>
        <groupId>com.sun</groupId>
        <artifactId>tools</artifactId>
        <version>1.8</version>
        <scope>system</scope>
        <systemPath>${java.home}/../lib/tools.jar</systemPath>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
    </dependency>
  </dependencies>

  <build>
    <sourceDirectory>${project.basedir}/src/java</sourceDirectory>
    <scriptSourceDirectory>${project.basedir}/src/bsh</scriptSourceDirectory>
    <testSourceDirectory>${project.basedir}/test/java</testSourceDirectory>
    <resources>
      <resource>
        <directory>${project.basedir}/src/resource</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <testResources>
      <testResource>
        <directory>${project.basedir}/test/resource</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>

    <pluginManagement>
      <!-- Define the versions and default values for all publigins in all descendant projects -->
      <plugins>
        <!--
          As of http://blog.soebes.de/blog/2017/04/02/maven-pom-files-without-a-version-in-it/
          this plugin resolves the ${revision} in the produced pom.xml included in the produced .jars

          NOTE: It does NOT include the dependencies, imposed through profiles!
                Therefore, the profiles should not add more dependencies than ones with <scope>provided</scope>

          As of http://maven.apache.org/maven-ci-friendly.html
          this allows the use of ${revision} property to coordinate the module versions
          -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>flatten-maven-plugin</artifactId>
          <version>1.0.1</version>
          <configuration>
            <updatePomFile>true</updatePomFile>

            <!--
              As of https://www.mojohaus.org/flatten-maven-plugin/flatten-mojo.html
              make maven FLAT plugin include the dependencies from the applied profiles by default
            -->
            <embedBuildProfileDependencies>true</embedBuildProfileDependencies>
          </configuration>
          <executions>
            <execution>
              <id>flatten</id>
              <phase>process-resources</phase>
              <goals>
                <goal>flatten</goal>
              </goals>
            </execution>
            <execution>
              <id>flatten.clean</id>
              <phase>clean</phase>
              <goals>
                <goal>clean</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.17</version>
          <configuration>
            <!--
              Always run each test in a dedicated JVM, specifically considering the fact that MDR is a singleton, which does not provide the needed isolation
              Default: <forkCount>1</forkCount>
              In order to suppress forking set the property: <forkCount>0</forkCount>
            -->
            <reuseForks>false</reuseForks>
            <failIfNoTests>false</failIfNoTests>

            <argLine>-ea -Xmx1024m -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=${DEBUG_SUSPEND},address=${DEBUG_PORT} -Djava.util.logging.config.file=${basedir}${file.separator}logging.properties</argLine>
            <systemPropertyVariables></systemPropertyVariables>

            <!-- Terminate the test running JVMs when the main process is terminated  -->
            <shutdown>kill</shutdown>
          </configuration>
        </plugin>

        <!-- Testing the plugin, see [A5] -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-invoker-plugin</artifactId>
          <version>3.1.0</version>
          <configuration>
            <!-- [A5] -->
            <projectsDirectory>test/maven</projectsDirectory>

            <!-- Let the scripts use the TEST DEPENDENCIES in the classpath -->
            <addTestClassPath>true</addTestClassPath>

            <!--
              Collect the execution output files in the "target" directory instead of the source directories test/maven/<name>/target
              See: https://maven.apache.org/plugins/maven-invoker-plugin/examples/clone-projects.html
              -->
            <cloneProjectsTo>${project.build.directory}/maven-test</cloneProjectsTo>
            <!--localRepositoryPath>${project.build.directory}/maven-repository</localRepositoryPath-->

            <!--
              Use an explicit settings.xml file to allow resolving the third-party dependencies in the local repository
              See: https://maven.apache.org/plugins/maven-invoker-plugin/examples/fast-use.html
            -->
            <settingsFile>test/maven/settings.xml</settingsFile>

            <pomIncludes>
              <pomInclude>*/pom.xml</pomInclude>
            </pomIncludes>

            <!-- Debug the spawned maven process-->
            <environmentVariables>
              <DEBUG_PORT>7001</DEBUG_PORT>
              <DEBUG_SUSPEND>n</DEBUG_SUSPEND>
            </environmentVariables>

            <debug>false</debug>

            <goals>package</goals>

            <!--
              The script to verify the execution should be in src/bsh specifically src/bsh/verify.bsh.
              The invoker will not fail if no script provided.
              -->
            <postBuildHookScript>src/bsh/verify.bsh</postBuildHookScript>

            <!--
              Additional variables / parameters of the scripts to execute
              -->
            <scriptVariables>
              <projectBaseDir>${basedir}</projectBaseDir>
              <projectGroupId>${project.groupId}</projectGroupId>
              <projectArtifactId>${project.artifactId}</projectArtifactId>
              <projectVersion>${project.version}</projectVersion>
            </scriptVariables>
          </configuration>
          <executions>
            <execution>
              <id>test</id>
              <phase>install</phase>
              <goals>
                <goal>install</goal>
                <goal>run</goal>
              </goals>
            </execution>
         </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-plugin-plugin</artifactId>
          <version>3.5.1</version>
        </plugin>

        <plugin>
          <!-- generate javadoc -->
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>3.0.1</version>
          <configuration>
            <quiet>true</quiet>
            <docencoding>UTF-8</docencoding>
            <encoding>UTF-8</encoding>
            <detectLinks>true</detectLinks>

            <!-- TODO: exclude the default package of the generated helpmojo classes -->
            <!--
            <excludePackageNames></excludePackageNames>
              -->
            <sourcetab>2</sourcetab>
          </configuration>
          <executions>
            <execution>
              <id>attach-javadoc</id>
              <goals>
                <goal>javadoc-no-fork</goal>
                <goal>jar</goal>
              </goals>
              <!-- Generate the jar after install, so that the frequient builds are fast. see the deploy plugin below -->
              <phase>deploy</phase>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.archetype</groupId>
          <artifactId>archetype-packaging</artifactId>
          <version>3.0.1</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>3.0.1</version>
          <executions>
            <execution>
              <id>attach-sources</id>
              <goals>
                <goal>jar</goal>
              </goals>
              <!-- Generate the jar after install, so that the frequient builds are fast. see the deploy plugin below -->
              <phase>deploy</phase>
            </execution>
          </executions>
        </plugin>

        <!--
          Sign out the artifacts to deploy, run only in deploy phase for efficiency
          See: https://central.sonatype.org/pages/apache-maven.html
          -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-gpg-plugin</artifactId>
          <version>1.5</version>
          <executions>
            <execution>
              <id>sign-artifacts</id>
              <phase>deploy</phase>
              <goals>
                <goal>sign</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-deploy-plugin</artifactId>
          <executions>
            <execution>
              <id>default-deploy</id>
              <goals>
                <goal>deploy</goal>
              </goals>
              <!-- Override and skip the default deploy goal in the default binding, until the source and javadoc archives are generated -->
              <phase>deploy</phase>
              <configuration>
                <skip>true</skip>
              </configuration>
            </execution>
            <execution>
              <id>deploy-all</id>
              <goals>
                <goal>deploy</goal>
              </goals>
              <!-- As there is no phase between install and deploy, this will be called last after the source and javadoc jars are generated -->
              <phase>deploy</phase>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <!-- publishing the reoports of project-info-reports plugin -->
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
          <dependencies>
            <!-- see http://maven.apache.org/plugins/maven-site-plugin/examples/adding-deploy-protocol.html -->
            <dependency>
              <groupId>org.apache.maven.wagon</groupId>
              <artifactId>wagon-ssh</artifactId>
              <version>3.1.0</version>
            </dependency>
          </dependencies>
        </plugin>

        <plugin>
          <!-- general reports, based on the pom.xml, not specialized for plugins -->
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>

      </plugins>
    </pluginManagement>

    <plugins>
      <!--
        As of http://blog.soebes.de/blog/2017/04/02/maven-pom-files-without-a-version-in-it/
        this plugin resolves the ${revision} in the produced pom.xml included in the produced .jars

        NOTE: It does NOT include the dependencies, imposed through profiles!
              Therefore, the profiles should not add more dependencies than ones with <scope>provided</scope>

        As of http://maven.apache.org/maven-ci-friendly.html
        this allows the use of ${revision} property to coordinate the module versions
        -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
       </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-gpg-plugin</artifactId>
      </plugin>

    </plugins>
  </build>

  <!-- https://mdatools.net/wiki/index.php?title=Modelant_-_migration_to_maven -->
  <profiles>
    <profile>
      <!--
        root project only, assuming it will always have the repository module
        NOTE: The implemented activation conditions do not allow using the artifact or project name.
        -->
      <id>root</id>
      <activation>
        <file>
          <exists>repository</exists>
        </file>
      </activation>
      <reporting>
        <plugins>
            <plugin>
              <!-- general reports, based on the pom.xml, not specialized for plugins -->
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-project-info-reports-plugin</artifactId>
              <reportSets>
                <reportSet>
                  <reports><!-- select reports -->
                    <report>modules</report>
                    <!--report>index</report-->
                    <!--report>summary</report-->
                    <report>licenses</report>
                    <report>ci-management</report>
                    <!--report>dependencies</report-->
                    <!--report>dependency-convergence</report-->
                    <!--report>dependency-info</report-->
                    <report>dependency-management</report>
                    <!--report>distribution-management</report-->
                    <report>issue-management</report>
                    <report>mailing-lists</report>
                    <!--report>plugin-management</report-->
                    <!--report>plugins</report-->
                    <report>team</report>
                    <report>scm</report>
                  </reports>
                </reportSet>
              </reportSets>
            </plugin>
        </plugins>
      </reporting>
    </profile>

    <profile>
      <!--
        root project only
        -->
      <id>non-root</id>
      <activation>
        <file>
          <missing>repository</missing>
        </file>
      </activation>
      <reporting>
        <plugins>
            <plugin>
              <!-- general reports, based on the pom.xml, not specialized for plugins -->
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-project-info-reports-plugin</artifactId>
              <reportSets>
                <reportSet>
                  <reports><!-- select reports -->
                    <report>modules</report>
                    <!--report>index</report-->
                    <!--report>summary</report-->
                    <report>licenses</report>
                    <!--report>ci-management</report-->
                    <report>dependencies</report>
                    <!--report>dependency-convergence</report-->
                    <!--report>dependency-info</report-->
                    <!--report>dependency-management</report-->
                    <!--report>distribution-management</report-->
                    <report>issue-management</report>
                    <report>mailing-lists</report>
                    <!--report>plugin-management</report-->
                    <!--report>plugins</report-->
                    <report>team</report>
                    <report>scm</report>
                  </reports>
                </reportSet>
              </reportSets>
            </plugin>
        </plugins>
      </reporting>
    </profile>

    <profile>
      <!--
        Maven profile for plugins development
        -->
      <id>maven-plugin</id>
      <activation>
        <file>
          <exists>test/maven</exists>
        </file>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.apache.maven</groupId>
          <artifactId>maven-plugin-api</artifactId>
        </dependency>
        <dependency>
          <groupId>org.apache.maven</groupId>
          <artifactId>maven-plugin-descriptor</artifactId>
        </dependency>
        <dependency>
          <groupId>org.apache.maven.plugin-tools</groupId>
          <artifactId>maven-plugin-annotations</artifactId>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin> <!-- plugin packaging -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-plugin-plugin</artifactId>
          </plugin>
          <plugin> <!-- testing  -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-invoker-plugin</artifactId>
          </plugin>
        </plugins>
      </build>

      <reporting>
        <plugins>
          <!-- run plugin-specific reports of goals, parameters, etc. -->
          <plugin>
            <artifactId>maven-plugin-plugin</artifactId>
            <reportSets>
              <reportSet>
                <reports>
                  <report>report</report>
                </reports>
              </reportSet>
            </reportSets>
          </plugin>
        </plugins>
      </reporting>
    </profile>

    <!--
      Activate it explicitly in order to deploy in Maven Central:

        mvn deploy -P production
      -->
    <profile>
      <id>production</id>

      <distributionManagement>
        <repository>
          <id>production</id>
          <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
        </repository>
        <snapshotRepository>
          <id>production</id>
          <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
      </distributionManagement>
    </profile>
  </profiles>
</project>