# Put this file in classpath.
# 
# Properties accessed through in org.uml13.wrap.Uml13WrapFactory
#

# Plural forms mapping:
#  Define properties like:
#    prlural.<singular form>=<plural form>
#
#  Use lowercase letters only, to provide case insensitive search
#
prlural.branch=branches
prlural.journalactivity=journalActivities
prlural.oldstatus=oldStatuses
prlural.newstatus=newStatuses
prlural.packages=packages
prlural.agency=agencies
prlural.availableserviceclass=availableServiceClasses
prlural.availablebookingclass=availableBookingClasses
prlural.routingtax=routingTaxes
prlural.airtax=airTaxes
prlural.performeditinerary=performedItineraries
prlural.travelagency=travelAgencies
prlural.thebookingclass=theBookingClasses
prlural.airlinepolicy=airlinePolicies
prlural.thebookclasspolicy=theBookClassPolicies
prlural.assigneduserroles=AssignedUserRoles
prlural.city=cities
prlural.allbookingclass=allBookingClasses
prlural.statistics=statistics
prlural.country=countries
plural.all=all
plural.children=children
plural.privileges=privileges
plural.delivery=deliveries

# added to support rev.eng. of Crazy Beans example
plural.UsedClass=UsedClasses
plural.Class=Classes
plural.Superclass=Superclasses

##
## Type mapping file
##
## NOTE:
##   The keys are searched first as an exact case-sensitive match, and if
##   no match found, then for a general match in lower case (case insensitive)
##   is searched for. If no match is found no change is applied.
##

### java.util.calendar=java.util.Date
### calendar=java.util.Date
### java.net.URL = java.lang.String

###
### Attributes translation
###
order=ordered
thetravelpolicyalertsettings=TPASettings
number=cardNumber
mode=elementMode
level=logLevel
class=bokingClass

##
## Mapping attribute types to JDBC and SQL types and lengths
##
## TYPE MAPPING ::=   'JDBC.'<qualified java type> '=' <constant>
##
## <constant>  ::= 'Types.'<constant name from java.sql.Types> | <number>
##
## LENGTH MAPPING ::=  'LENGTH.'<qualified java type> '=' <number>
##
## TYPE MAPPING ::=   'SQL.'<qualified java type> '=' <SQL type>
##
JDBC.java.lang.String = Types.VARCHAR
SQL.java.lang.String = VARCHAR2
LENGTH.java.lang.String = 150 CHAR

JDBC.java.util.Date = Types.TIMESTAMP
SQL.java.util.Date = TIMESTAMP
JDBC.java.sql.Date  = Types.TIMESTAMP
SQL.java.sql.Date  = TIMESTAMP
JDBC.java.sql.Timestamp  = Types.TIMESTAMP
SQL.java.sql.Timestamp  = TIMESTAMP
# no size provdied for timestamps

JDBC.int = Types.NUMERIC
SQL.int = NUMBER
LENGTH.int = 18

JDBC.long = Types.NUMERIC
SQL.long = NUMBER
LENGTH.long = 18

JDBC.byte = Types.NUMERIC
SQL.byte = NUMBER
LENGTH.byte = 3

JDBC.java.lang.Long = Types.NUMERIC
SQL.java.lang.Long = NUMBER
LENGTH.java.lang.Long = 18

JDBC.java.lang.Integer = Types.NUMERIC
SQL.java.lang.Integer = NUMBER
LENGTH.java.lang.Integer = 18

JDBC.java.lang.Boolean = Types.NUMERIC
SQL.java.lang.Boolean = NUMBER
LENGTH.java.lang.Boolean = 1

JDBC.boolean = Types.NUMERIC
SQL.boolean = NUMBER
LENGTH.boolean = 1

JDBC.Boolean = Types. NUMERIC
SQL.Boolean =  NUMBER
LENGTH.Boolean = 1

JDBC.byte = Types.NUMERIC
SQL.byte = NUMBER
LENGTH.byte = 3

JDBC.char = Types.CHAR
SQL.char = CHAR
LENGTH.char = 1

JDBC.Date = Types.TIMESTAMP
SQL.Date = TIMESTAMP
LENGTH.Date = 8

JDBC.float = Types.NUMERIC
SQL.float = NUMBER
LENGTH.float = 18

JDBC.Float = Types.NUMERIC
SQL.Float = NUMBER
LENGTH.Float = 18

JDBC.double = Types.NUMERIC
SQL.double = NUMBER
LENGTH.double = 18

JDBC.Double = Types.NUMERIC
SQL.Double = NUMBER
LENGTH.Double = 18

JDBC.int = Types.NUMERIC
SQL.int = NUMBER
LENGTH.int = 18

JDBC.java.util.Date = Types.TIMESTAMP
SQL.java.util.Date = TIMESTAMP
# LENGTH.java.util.Date =

JDBC.java.util.Locale = Types.VARCHAR
SQL.java.util.Locale = VARCHAR2
LENGTH.java.util.Locale = 20

JDBC.long = Types.NUMERIC
SQL.long = NUMBER
LENGTH.long = 18

JDBC.Long = Types.NUMERIC
SQL.Long = NUMBER
LENGTH.Long = 18

JDBC.Object = Types.VARCHAR
SQL.Object = VARCHAR2
LENGTH.Object = 150 CHAR

JDBC.short = Types.NUMERIC
SQL.short = NUMBER
LENGTH.short = 5

JDBC.String = Types.VARCHAR
SQL.String = VARCHAR2
LENGTH.String = 150 CHAR

JDBC.java.net.URL = Types.VARCHAR
SQL.java.net.URL = VARCHAR2
LENGTH.java.net.URL = 250 CHAR

SQL.byte\[\] = BLOB

# Map primitive types and special classes to wrappers
#
# Format ::= 'MAP_PRIMITIVE_TYPE_TO_WRAPPER_CLASS.'<type> '=' <class>
#
MAP_PRIMITIVE_TYPE_TO_WRAPPER_CLASS.int=Integer
MAP_PRIMITIVE_TYPE_TO_WRAPPER_CLASS.long=Long
MAP_PRIMITIVE_TYPE_TO_WRAPPER_CLASS.float=Float
MAP_PRIMITIVE_TYPE_TO_WRAPPER_CLASS.double=Double
MAP_PRIMITIVE_TYPE_TO_WRAPPER_CLASS.short=Short
MAP_PRIMITIVE_TYPE_TO_WRAPPER_CLASS.byte=Byte
MAP_PRIMITIVE_TYPE_TO_WRAPPER_CLASS.boolean=Boolean
MAP_PRIMITIVE_TYPE_TO_WRAPPER_CLASS.char=Character

# Excluded package names (imposed by the modeling tool)
#
# Format ::= 'EXCLUDED_PACKAGE_NAME.'<simple package name>
#
# See the properties files format
EXCLUDED_PACKAGE_NAME.Logical\ View
EXCLUDED_PACKAGE_NAME.Use\ Case\ View
EXCLUDED_PACKAGE_NAME.Component\ View
EXCLUDED_PACKAGE_NAME.Analysis\ View
EXCLUDED_PACKAGE_NAME.Domain\ Model

# The package names that the code generation would provide base packages for
#
# Format ::= 'BASE_PACKAGE_ALLOWED.'<simple package name>
#
# See the conventions
BASE_PACKAGE_ALLOWED.domain
BASE_PACKAGE_ALLOWED.guicomponent
BASE_PACKAGE_ALLOWED.operation
